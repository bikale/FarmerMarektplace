{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/common/components/auth/forgetPassword/forgetpassworddialog.component.ts","webpack:///src/app/common/components/auth/forgetPassword/forgetpassworddialog.component.html","webpack:///src/app/common/components/auth/login.component.ts","webpack:///src/app/common/components/auth/login.component.html","webpack:///src/app/common/components/auth/resetpassword/resetpassword.component.ts","webpack:///src/app/common/components/auth/resetpassword/resetpassword.component.html","webpack:///src/app/common/components/auth/signup.component.ts","webpack:///src/app/common/components/auth/signup.component.html","webpack:///src/app/common/guards/access.guard.ts","webpack:///src/app/common/guards/superuser.guard.ts","webpack:///src/app/common/interceptors/http.interceptor.ts","webpack:///src/app/common/services/auth.service.ts","webpack:///src/app/modules/angular-material/angular-material.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","loadChildren","FarmerdashboardModule","canActivate","SuperUserModule","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","ForgetpassworddialogComponent","authService","message","error","forgetEmailControl","required","email","forgetPassword","value","subscribe","data","onForgetPassword","LoginComponent","formbuilder","router","dialog","hide","loginform","group","compose","password","open","invalid","loading","login","pipe","role","navigate","console","log","onLogin","openforgetpasswordDialog","ResetpasswordComponent","activatedRoute","confirmPasswordValidator","control","reset_password_form","confirmpassword","paramMap","params","resetToken","get","resetPassword","resettoken","onResetPassword","SignupComponent","sign_up_form","emailExistValidator","emailcontrol","match","checkEmail","res","success","emailexist","firstname","lastname","createAccount","onsignUp","AccessGuard","next","state","currentUser","currentUserValue","queryParams","returnUrl","url","providedIn","SuperuserGuard","HttpRequestInterceptor","request","method","headers","body","clone","setHeaders","Authorization","token","handle","AuthService","http","authUrl","farmerUrl","currentUserSubject","JSON","parse","localStorage","getItem","post","user","setItem","stringify","err","loginCredential","removeItem","patch","AngularMaterialModule","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { LoginComponent } from \"./common/components/auth/login.component\";\nimport { SignupComponent } from \"./common/components/auth/signup.component\";\nimport { AccessGuard } from \"./common/guards/access.guard\";\nimport { SuperuserGuard } from \"./common/guards/superuser.guard\";\nimport { ResetpasswordComponent } from \"./common/components/auth/resetpassword/resetpassword.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    loadChildren: () =>\n      import(\"./modules/farmer-module/farmerdashboard.module\").then(\n        (module) => module.FarmerdashboardModule\n      ),\n    canActivate: [AccessGuard],\n  },\n  {\n    path: \"super\",\n    loadChildren: () =>\n      import(\"./modules/super-user/super-user.module\").then(\n        (module) => module.SuperUserModule\n      ),\n    canActivate: [SuperuserGuard],\n  },\n  { path: \"login\", component: LoginComponent },\n  { path: \"signup\", component: SignupComponent },\n  { path: \"resetpassword/:resettoken\", component: ResetpasswordComponent },\n  { path: \"**\", redirectTo: \"\", pathMatch: \"full\" },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"farmermarket\";\n}\n","<!-- <app-login></app-login> -->\n<!-- <app-signup></app-signup> -->\n\n<router-outlet> </router-outlet>\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\n\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AngularMaterialModule } from \"./modules/angular-material/angular-material.module\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\n\nimport { LoginComponent } from \"./common/components/auth/login.component\";\nimport { SignupComponent } from \"./common/components/auth/signup.component\";\nimport { HttpRequestInterceptor } from \"./common/interceptors/http.interceptor\";\nimport { ForgetpassworddialogComponent } from './common/components/auth/forgetPassword/forgetpassworddialog.component';\nimport { ResetpasswordComponent } from './common/components/auth/resetpassword/resetpassword.component';\n\n@NgModule({\n  declarations: [AppComponent, LoginComponent, SignupComponent, ForgetpassworddialogComponent, ResetpasswordComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpRequestInterceptor,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { AuthService } from \"src/app/common/services/auth.service\";\n\n@Component({\n  selector: \"app-forgetpassworddialog\",\n  templateUrl: \"./forgetpassworddialog.component.html\",\n  styleUrls: [\"./forgetpassworddialog.component.css\"],\n})\nexport class ForgetpassworddialogComponent implements OnInit {\n  message: string = null;\n  error: string = null;\n\n  forgetEmailControl = new FormControl(\"\", [\n    Validators.required,\n    Validators.email,\n  ]);\n  constructor(private authService: AuthService) {}\n\n  ngOnInit(): void {}\n  onForgetPassword() {\n    this.message = null;\n    this.error = null;\n    this.authService.forgetPassword(this.forgetEmailControl.value).subscribe(\n      (data) => {\n        this.message = \"Email Sent Check your email please\";\n      },\n      (error) => {\n        this.error = \"There is no account with this email\";\n      }\n    );\n  }\n}\n","<div class=\"forgetpasswordcontainer\">\n  <h1 mat-dialog-title>Forget password ?</h1>\n  <mat-dialog-content class=\"mat-typography\">\n    <p>\n      Please provide your email address\n    </p>\n    <p>and we will send you a link in ur email</p>\n    <mat-error *ngIf=\"message\">\n      {{ message }}\n    </mat-error>\n    <mat-error *ngIf=\"error\">\n      {{ error }}\n    </mat-error>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Enter your email</mat-label>\n      <input\n        matInput\n        placeholder=\"farmer@farmer.com\"\n        [formControl]=\"forgetEmailControl\"\n        required\n      />\n\n      <mat-error\n        *ngIf=\"\n          forgetEmailControl.hasError('email') &&\n          !forgetEmailControl.hasError('required')\n        \"\n      >\n        Please enter a valid email address\n      </mat-error>\n      <mat-error *ngIf=\"forgetEmailControl.hasError('required')\">\n        Email is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button mat-button mat-dialog-close>Cancel</button>\n    <button\n      mat-button\n      (click)=\"onForgetPassword()\"\n      [disabled]=\"!forgetEmailControl.valid\"\n    >\n      Submit\n    </button>\n  </mat-dialog-actions>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../services/auth.service\";\nimport { first } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport { ApiResponse } from \"../../_models/products\";\nimport { ForgetpassworddialogComponent } from \"./forgetPassword/forgetpassworddialog.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"],\n})\nexport class LoginComponent implements OnInit {\n  hide = true;\n  loginform;\n  loading;\n  error: any;\n  constructor(\n    formbuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    public dialog: MatDialog\n  ) {\n    this.loginform = formbuilder.group({\n      email: [\"\", Validators.compose([Validators.required, Validators.email])],\n      password: [\"\", Validators.required],\n    });\n  }\n  openforgetpasswordDialog() {\n    this.dialog.open(ForgetpassworddialogComponent);\n  }\n\n  ngOnInit(): void {}\n  onLogin() {\n    // stop here if form is invalid\n    if (this.loginform.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.authService\n      .login(this.loginform.value)\n      .pipe(first()) //pipe(first()) automatically unsubscribes from the observable after returning the first item\n      .subscribe(\n        (data: ApiResponse) => {\n          if (data.role == \"super\") {\n            this.router.navigate([\"super\"]);\n          } else {\n            this.router.navigate([\"/\"]);\n          }\n        },\n        (error) => {\n          console.log(error.error);\n          this.error = error;\n          this.loading = false;\n        }\n      );\n  }\n}\n","<body>\n  <mat-card class=\"login-card\">\n    <mat-grid-list cols=\"5\" rowHeight=\"70vh\">\n      <mat-grid-tile colspan=\"3\" class=\"login-panel-left\"> </mat-grid-tile>\n      <mat-grid-tile colspan=\"2\">\n        <form [formGroup]=\"loginform\" (ngSubmit)=\"onLogin()\" class=\"login-form\">\n          <p>\n            <mat-error *ngIf=\"error\">\n              Please enter a valid email address and password\n            </mat-error>\n          </p>\n          <p>Please enter your email and password</p>\n\n          <p>\n            <mat-form-field appearance=\"outline\" class=\"login-form-full-width\">\n              <mat-label>Enter your email</mat-label>\n              <input\n                matInput\n                placeholder=\"Ex. email@example.com\"\n                formControlName=\"email\"\n              />\n              <mat-icon matSuffix>email</mat-icon>\n\n              <mat-error\n                *ngIf=\"\n                  loginform.get('email').hasError('email') &&\n                  !loginform.get('email').hasError('required')\n                \"\n              >\n                Please enter a valid email address\n              </mat-error>\n              <mat-error *ngIf=\"loginform.get('email').hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <p>\n            <mat-form-field appearance=\"outline\" class=\"login-form-full-width\">\n              <mat-label>Enter your password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"password\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error *ngIf=\"loginform.get('password').hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <button\n            mat-flat-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!loginform.valid\"\n          >\n            login\n          </button>\n          <div style=\"padding-top: 20px;\">\n            <a mat-button (click)=\"openforgetpasswordDialog()\"\n              >Forget password ?</a\n            >\n          </div>\n          <div style=\"padding-top: 70px;\">\n            <a mat-button [routerLink]=\"['/signup']\">Create an account</a>\n          </div>\n        </form>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n</body>\n","import { Component, OnInit } from \"@angular/core\";\nimport { first, flatMap } from \"rxjs/operators\";\nimport { FormControl, Validators, FormBuilder } from \"@angular/forms\";\nimport { Router, ActivatedRoute, ParamMap } from \"@angular/router\";\nimport { AuthService } from \"src/app/common/services/auth.service\";\nimport { of } from \"rxjs\";\n\n@Component({\n  selector: \"app-resetpassword\",\n  templateUrl: \"./resetpassword.component.html\",\n  styleUrls: [\"./resetpassword.component.css\"],\n})\nexport class ResetpasswordComponent implements OnInit {\n  hide = true;\n  reset_password_form;\n  error;\n  loading;\n  resetToken: string;\n  constructor(\n    private formbuilder: FormBuilder,\n    private authService: AuthService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    this.reset_password_form = formbuilder.group({\n      password: [\"\", Validators.required],\n      confirmpassword: [\n        \"\",\n        [Validators.required, this.confirmPasswordValidator],\n      ],\n    });\n  }\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe((params: ParamMap) => {\n      this.resetToken = params.get(\"resettoken\");\n    });\n  }\n\n  onResetPassword() {\n    console.log(this.reset_password_form.value, this.resetToken);\n    this.authService\n      .resetPassword({\n        ...this.reset_password_form.value,\n        resettoken: this.resetToken,\n      })\n      .pipe(first()) //pipe(first()) automatically unsubscribes from the observable after returning the first item\n      .subscribe(\n        (data) => {\n          this.router.navigate([\"/\"]);\n        },\n        (error) => {\n          console.log(error.error);\n          this.error = \"Invalid Token\";\n          this.loading = false;\n        }\n      );\n  }\n\n  confirmPasswordValidator = (\n    control: FormControl\n  ): { [s: string]: boolean } => {\n    if (control.value === this.reset_password_form?.value.password) {\n      return null;\n    }\n    return { invalid: true };\n  };\n}\n","<body>\n  <mat-card class=\"register-card\">\n    <mat-grid-list cols=\"4\" rowHeight=\"70vh\">\n      <mat-grid-tile colspan=\"2\">\n        <form\n          [formGroup]=\"reset_password_form\"\n          (ngSubmit)=\"onResetPassword()\"\n          class=\"register-form\"\n        >\n          <h2><strong>Reset Password Form</strong></h2>\n          <p>\n            <mat-error *ngIf=\"error\">\n              {{ error }}\n            </mat-error>\n          </p>\n          <table class=\"register-form-full-width\" cellspacing=\"0\">\n            <tr></tr>\n          </table>\n\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Create new password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"password\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error\n                *ngIf=\"reset_password_form.get('password').hasError('required')\"\n              >\n                Password is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Confirm password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"confirmpassword\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error\n                *ngIf=\"\n                  reset_password_form\n                    .get('confirmpassword')\n                    .hasError('required')\n                \"\n              >\n                Confirm password is <strong>required</strong>\n              </mat-error>\n              <mat-error\n                *ngIf=\"\n                  reset_password_form\n                    .get('confirmpassword')\n                    .hasError('invalid') &&\n                  !reset_password_form\n                    .get('confirmpassword')\n                    .hasError('required')\n                \"\n              >\n                Password <strong>do not match</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n\n          <button\n            mat-flat-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!reset_password_form.valid\"\n          >\n            Submit\n          </button>\n\n          <div style=\"padding-top: 70px;\">\n            Goto login ?\n            <a [routerLink]=\"['/login']\">Login</a>\n          </div>\n        </form>\n      </mat-grid-tile>\n\n      <mat-grid-tile colspan=\"2\" class=\"register-panel-right\">\n        Welcome to Farmer market\n        <mat-icon>market</mat-icon>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n</body>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  AsyncValidatorFn,\n  EmailValidator,\n  FormGroup,\n} from \"@angular/forms\";\nimport { of, timer } from \"rxjs\";\nimport { debounceTime, map, flatMap, first } from \"rxjs/operators\";\nimport { AuthService } from \"../../services/auth.service\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"app-signup\",\n  templateUrl: \"./signup.component.html\",\n  styleUrls: [\"./signup.component.css\"],\n})\nexport class SignupComponent {\n  hide = true;\n  sign_up_form;\n  error;\n  loading;\n  constructor(\n    private formbuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.sign_up_form = formbuilder.group({\n      firstname: [\"\", Validators.required],\n      lastname: [\"\", Validators.required],\n      email: [\"\", [Validators.required], [this.emailExistValidator]],\n      password: [\"\", Validators.required],\n      confirmpassword: [\n        \"\",\n        [Validators.required, this.confirmPasswordValidator],\n      ],\n    });\n  }\n\n  get email() {\n    return this.sign_up_form.get(\"email\");\n  }\n\n  onsignUp() {\n    this.authService\n      .createAccount(this.sign_up_form.value)\n      .pipe(first()) //pipe(first()) automatically unsubscribes from the observable after returning the first item\n      .subscribe(\n        (data) => {\n          this.router.navigate([\"/\"]);\n        },\n        (error) => {\n          console.log(error.error);\n          this.error = error;\n          this.loading = false;\n        }\n      );\n  }\n\n  confirmPasswordValidator = (\n    control: FormControl\n  ): { [s: string]: boolean } => {\n    if (control.value === this.sign_up_form?.value.password) {\n      return null;\n    }\n    return { invalid: true };\n  };\n\n  emailExistValidator = (emailcontrol: AbstractControl) => {\n    return timer(1000).pipe(\n      flatMap((data) => {\n        if (\n          !emailcontrol.value.match(\"[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$\") // check the email pattern\n        ) {\n          return of({ email: true });\n        } else {\n          return this.authService.checkEmail(emailcontrol.value).pipe(\n            map((res: any) => {\n              if (res.success == true) {\n                return null;\n              } else {\n                return { emailexist: true };\n              }\n            })\n          );\n        }\n      })\n    );\n  };\n}\n","<body>\n  <mat-card class=\"register-card\">\n    <mat-grid-list cols=\"4\" rowHeight=\"70vh\">\n      <mat-grid-tile colspan=\"2\">\n        <form\n          [formGroup]=\"sign_up_form\"\n          (ngSubmit)=\"onsignUp()\"\n          class=\"register-form\"\n        >\n          <p>\n            <mat-error *ngIf=\"error\">\n              Please enter a valid information\n            </mat-error>\n          </p>\n          <table class=\"register-form-full-width\" cellspacing=\"0\">\n            <tr>\n              <td>\n                <mat-form-field class=\"register-form-full-width\">\n                  <mat-label>First name</mat-label>\n                  <input\n                    matInput\n                    placeholder=\"Ex. Abebe\"\n                    formControlName=\"firstname\"\n                  />\n                  <mat-error\n                    *ngIf=\"sign_up_form.get('firstname').hasError('required')\"\n                  >\n                    Firstname is <strong>required</strong>\n                  </mat-error>\n                </mat-form-field>\n              </td>\n              <td>\n                <mat-form-field class=\"register-form-full-width\">\n                  <mat-label>Last name</mat-label>\n                  <input\n                    matInput\n                    placeholder=\"Ex. Bikila\"\n                    formControlName=\"lastname\"\n                  />\n                  <mat-error\n                    *ngIf=\"sign_up_form.get('lastname').hasError('required')\"\n                  >\n                    Lastname is <strong>required</strong>\n                  </mat-error>\n                </mat-form-field>\n              </td>\n            </tr>\n          </table>\n\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Enter your email</mat-label>\n              <input\n                matInput\n                placeholder=\"Ex. email@example.com\"\n                formControlName=\"email\"\n              />\n              <mat-icon matSuffix>email</mat-icon>\n\n              <mat-error\n                *ngIf=\"\n                  sign_up_form.get('email').hasError('email') &&\n                  !sign_up_form.get('email').hasError('required')\n                \"\n              >\n                Please enter a valid email address\n              </mat-error>\n\n              <!-- check email exist  -->\n              <mat-error\n                *ngIf=\"\n                  sign_up_form.get('email').hasError('emailexist') &&\n                  !sign_up_form.get('email').hasError('email') &&\n                  !sign_up_form.get('email').hasError('required')\n                \"\n              >\n                <strong>Email already exist</strong>\n              </mat-error>\n\n              <!-- checking availablity exist  -->\n              <!-- <mat-error *ngIf=\"sign_up_form.pending\">\n                <strong> checking email availablity </strong>\n              </mat-error> -->\n\n              <mat-error *ngIf=\"sign_up_form.get('email').hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Create password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"password\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error\n                *ngIf=\"sign_up_form.get('password').hasError('required')\"\n              >\n                Password is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Confirm password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"confirmpassword\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error\n                *ngIf=\"sign_up_form.get('confirmpassword').hasError('required')\"\n              >\n                Confirm password is <strong>required</strong>\n              </mat-error>\n              <mat-error\n                *ngIf=\"\n                  sign_up_form.get('confirmpassword').hasError('invalid') &&\n                  !sign_up_form.get('confirmpassword').hasError('required')\n                \"\n              >\n                Password <strong>do not match</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n\n          <button\n            mat-flat-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!sign_up_form.valid\"\n          >\n            register\n          </button>\n\n          <div style=\"padding-top: 70px;\">\n            Already have an account ?\n            <a [routerLink]=\"['/login']\">Login</a>\n          </div>\n        </form>\n      </mat-grid-tile>\n\n      <mat-grid-tile colspan=\"2\" class=\"register-panel-right\">\n        Welcome to Farmer market\n        <mat-icon>market</mat-icon>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n</body>\n","import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const currentUser = this.authService.currentUserValue();\n    console.log(currentUser);\n    if (currentUser && currentUser.role == \"farmer\") {\n      // logged in so return true\n      return true;\n    } else if (currentUser && currentUser.role == \"super\") {\n      //if the user is logged in but the role is super redirect him to super\n      this.router.navigate([\"/super\"]);\n    } else {\n      // not logged in so redirect to login page with the return url => to return back\n      this.router.navigate([\"/login\"], {\n        queryParams: { returnUrl: state.url },\n      });\n      return false;\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SuperuserGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const currentUser = this.authService.currentUserValue();\n\n    if (currentUser && currentUser.role == \"super\") {\n      // logged in so return true\n      return true;\n    } else if (currentUser && currentUser.role == \"farmer\") {\n      //if the user is logged in but the role is super redirect him to farmer page\n      this.router.navigate([\"/\"]);\n    } else {\n      // not logged in so redirect to login page with the return url => to return back\n      this.router.navigate([\"/login\"], {\n        queryParams: { returnUrl: state.url },\n      });\n      return false;\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    const { url, method, headers, body } = request;\n    let currentUser = this.authService.currentUserValue();\n\n    if (currentUser) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`,\n        },\n      });\n    }\n    return next.handle(request);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { of, Observable, timer, BehaviorSubject, throwError } from \"rxjs\";\nimport { debounceTime, switchMap, map, catchError } from \"rxjs/operators\";\n\nimport {\n  User,\n  Registrationform,\n  LoginCredential,\n  ResetPassword,\n} from \"../_models/user\";\nimport { error } from \"@angular/compiler/src/util\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n  // The RxJS BehaviorSubject is a special type of Subject that keeps hold of the current value and emits\n  // it to any new subscribers as soon as they subscribe, while regular Subjects\n  // don't store the current value and only emit values that are published after a subscription is created.\n  private currentUserSubject: BehaviorSubject<User>;\n\n  private authUrl = \"http://localhost:8080/api/v1/farmermarket/auth\";\n  private farmerUrl = \"http://localhost:8080/api/v1/farmermarket/farmers\";\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(\n      JSON.parse(localStorage.getItem(\"accesstoken\"))\n    );\n  }\n\n  createAccount(data: Registrationform): Observable<any> {\n    // the default role for using the web is farmer\n    return this.http\n      .post(`${this.authUrl}/users`, { ...data, role: \"farmer\" })\n      .pipe(\n        map((user) => {\n          // store user details and jwt token in local storage\n          localStorage.setItem(\n            \"accesstoken\",\n            JSON.stringify({ token: user[\"token\"], role: user[\"role\"] })\n          );\n          this.currentUserSubject.next({\n            token: user[\"token\"],\n            role: user[\"role\"],\n          }); //notify all subscribers that the user has logged in.\n          return user;\n        }),\n        catchError((err) => {\n          // console.log(\"error caught in service\");\n          // console.error(err);\n          //Handle the error here\n          return throwError(err); //Rethrow it back to component\n        })\n      );\n  }\n  checkEmail(email: string) {\n    // check if email exist or not\n    return this.http.get(`${this.authUrl}/users/${email}`);\n  }\n\n  // The currentUserValue getter allows other components an easy way to get the value of the currently logged in user without having to subscribe to the currentUser Observable.\n  public currentUserValue(): User {\n    return this.currentUserSubject.value;\n  }\n\n  login(loginCredential: LoginCredential) {\n    return this.http.post(`${this.authUrl}/login`, loginCredential).pipe(\n      map((user) => {\n        // store user details and jwt token in local storage\n        localStorage.setItem(\n          \"accesstoken\",\n          JSON.stringify({ token: user[\"token\"], role: user[\"role\"] })\n        );\n        this.currentUserSubject.next({\n          token: user[\"token\"],\n          role: user[\"role\"],\n        }); //notify all subscribers that the user has logged in.\n        return user;\n      }),\n      catchError((err) => {\n        // console.log(\"error caught in service\");\n        // console.error(err);\n        //Handle the error here\n        return throwError(err); //Rethrow it back to component\n      })\n    );\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem(\"accesstoken\");\n    this.currentUserSubject.next({ token: null, role: null });\n  }\n  //The logout() method removes the current user object from local storage and publishes null to the currentUserSubject to notify all subscribers that the user has logged out.\n\n  //get user profile -name pictures\n  getMe() {\n    return this.http.get(`${this.authUrl}/me`);\n  }\n\n  forgetPassword(email: string) {\n    return this.http.patch(`${this.authUrl}/forgotpassword`, { email });\n  }\n  resetPassword({ email, password, resettoken }: ResetPassword) {\n    return this.http\n      .patch(`${this.authUrl}/resetpassword/${resettoken}`, {\n        email,\n        password,\n      })\n      .pipe(\n        map((user) => {\n          // store user details and jwt token in local storage\n          localStorage.setItem(\n            \"accesstoken\",\n            JSON.stringify({ token: user[\"token\"], role: user[\"role\"] })\n          );\n          this.currentUserSubject.next({\n            token: user[\"token\"],\n            role: user[\"role\"],\n          }); //notify all subscribers that the user has logged in.\n          return user;\n        }),\n        catchError((err) => {\n          // console.log(\"error caught in service\");\n          // console.error(err);\n          //Handle the error here\n          return throwError(err); //Rethrow it back to component\n        })\n      );\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatGridListModule } from \"@angular/material/grid-list\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { LayoutModule } from \"@angular/cdk/layout\";\nimport { MatBadgeModule } from \"@angular/material/badge\";\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatSlideToggleModule } from \"@angular/material/slide-toggle\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCardModule,\n    MatGridListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    LayoutModule,\n    MatBadgeModule,\n    MatProgressBarModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n  ],\n  exports: [\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCardModule,\n    MatGridListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    LayoutModule,\n    MatBadgeModule,\n    MatProgressBarModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n  ],\n  providers: [],\n})\nexport class AngularMaterialModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}