{"version":3,"sources":["webpack:///src/app/common/services/farmer.service.ts","webpack:///src/app/modules/farmer-module/components/UI/home-dashboard/home-dashboard.component.ts","webpack:///src/app/modules/farmer-module/components/UI/home-dashboard/home-dashboard.component.html","webpack:///src/app/modules/farmer-module/components/UI/home-dashboard/orders/order-table.component.ts","webpack:///src/app/modules/farmer-module/components/UI/home-dashboard/orders/order-table.component.html","webpack:///src/app/modules/farmer-module/components/UI/home-dashboard/product/add-product-dialog/add-product-dialog.component.ts","webpack:///src/app/modules/farmer-module/components/UI/home-dashboard/product/add-product-dialog/add-product-dialog.component.html","webpack:///src/app/modules/farmer-module/components/UI/home-dashboard/product/product-table/products-table.component.ts","webpack:///src/app/modules/farmer-module/components/UI/home-dashboard/product/product-table/products-table.component.html","webpack:///src/app/modules/farmer-module/components/UI/orders/order-detail/detail.component.ts","webpack:///src/app/modules/farmer-module/components/UI/orders/order-detail/detail.component.html","webpack:///src/app/modules/farmer-module/components/UI/orders/order-list.component.ts","webpack:///src/app/modules/farmer-module/components/UI/orders/order-list.component.html","webpack:///src/app/modules/farmer-module/components/UI/products/products-list.component.ts","webpack:///src/app/modules/farmer-module/components/UI/products/products-list.component.html","webpack:///src/app/modules/farmer-module/components/UI/sidenav/sidenav.component.ts","webpack:///src/app/modules/farmer-module/components/UI/sidenav/sidenav.component.html","webpack:///src/app/modules/farmer-module/components/dashboard.component.ts","webpack:///src/app/modules/farmer-module/components/dashboard.component.html","webpack:///src/app/modules/farmer-module/farmerdashboard.module.ts"],"names":["FarmerService","http","farmerUrl","get","pipe","products","err","product","post","orders","ordernumber","status","patch","data","providedIn","HomeDashboardComponent","breakpointObserver","cards","observe","Handset","matches","title","classname","bg_icon_name","cols","rows","selector","templateUrl","styleUrls","OrderTableComponent","dialog","farmerService","displayedColumns","dataSource","sortedData","getOrders","subscribe","console","log","paginator","error","sort","slice","active","direction","sorteddata","a","b","isAsc","compare","_id","totalprice","quantity","order","dialogRef","open","afterClosed","result","map","item","firstPage","event","filterValue","target","value","filteredData","filter","toLowerCase","includes","applyFilter","sortData","AddProductDialogComponent","fb","addProductForm","group","name","required","price","photo","validFileExtensions","description","productImageRef","formData","FormData","append","files","addProduct","control","endsWith","invalid","onAddProduct","ProductsTableComponent","getProducts","res","ELEMENT_DATA","DetailComponent","orderStatus","viewValue","statusUpdateControl","updateOrders","updateOrderStatus","OrderListComponent","ProductsListComponent","SidenavComponent","DashboardComponent","authService","router","getMe","userProfile","firstname","lastname","picture","logout","navigate","onLogout","FarmerdashboardModule","forChild","path","component","children","declarations","imports","exports"],"mappings":"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","file":"modules-farmer-module-farmerdashboard-module-es5.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map, catchError } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport { Product } from \"../_models/products\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class FarmerService {\n  private farmerUrl = \"http://localhost:8080/api/v1/farmermarket/farmers\";\n  constructor(private http: HttpClient) {}\n\n  getProducts() {\n    return this.http.get(`${this.farmerUrl}/products`).pipe(\n      map((products) => {\n        return products;\n      }),\n      catchError((err) => {\n        // console.log(\"error caught in service\");\n        // console.error(err);\n        //Handle the error here\n        return throwError(err); //Rethrow it back to component\n      })\n    );\n  }\n\n  addProduct(product) {\n    return this.http.post(`${this.farmerUrl}/products`, product);\n  }\n\n  getOrders() {\n    return this.http.get(`${this.farmerUrl}/orders`).pipe(\n      map((orders) => {\n        return orders;\n      }),\n      catchError((err) => {\n        // console.log(\"error caught in service\");\n        // console.error(err);\n        //Handle the error here\n        return throwError(err); //Rethrow it back to component\n      })\n    );\n  }\n  updateOrders(ordernumber: string, status: string) {\n    return this.http\n      .patch(`${this.farmerUrl}/orders/${ordernumber}`, { status })\n      .pipe(\n        map((data) => {\n          return data;\n        }),\n        catchError((err) => {\n          // console.log(\"error caught in service\");\n          // console.error(err);\n          //Handle the error here\n          return throwError(err); //Rethrow it back to component\n        })\n      );\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { map } from \"rxjs/operators\";\nimport { Breakpoints, BreakpointObserver } from \"@angular/cdk/layout\";\n\n@Component({\n  selector: \"app-home-dashboard\",\n  templateUrl: \"./home-dashboard.component.html\",\n  styleUrls: [\"./home-dashboard.component.css\"],\n})\nexport class HomeDashboardComponent implements OnInit {\n  constructor(private breakpointObserver: BreakpointObserver) {}\n  ngOnInit() {}\n\n  /** Based on the screen size, switch from standard to one column per row */\n  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    map(({ matches }) => {\n      if (matches) {\n        return [\n          // bg_icon_name mat icon names    //classname css reference\n          {\n            title: \"New Orders\",\n            classname: \"new-orders\",\n            bg_icon_name: \"local_shipping\",\n            cols: 4,\n            rows: 1,\n          },\n          {\n            title: \"Earnings\",\n            classname: \"total-earnings\",\n            bg_icon_name: \"monetization_on\",\n            cols: 4,\n            rows: 1,\n          },\n          {\n            title: \"Orders\",\n            classname: \"total-orders\",\n            bg_icon_name: \"account_balance\",\n            cols: 4,\n            rows: 1,\n          },\n          {\n            title: \"Returns\",\n            classname: \"returns\",\n            bg_icon_name: \"backspace\",\n            cols: 4,\n            rows: 1,\n          },\n          {\n            title: \"Orders List\",\n            classname: \"\",\n            bg_icon_name: \"local_shipping\",\n            cols: 4,\n            rows: 3,\n          },\n          {\n            title: \"Profile\",\n            classname: \"\",\n            bg_icon_name: \"account_circle\",\n            cols: 4,\n            rows: 1,\n          },\n          {\n            title: \"Product Inventory\",\n            classname: \"\",\n            bg_icon_name: \"add_shopping_cart\",\n            cols: 4,\n            rows: 3,\n          },\n        ];\n      }\n\n      return [\n        {\n          title: \"New Orders\",\n          classname: \"new-orders\",\n          bg_icon_name: \"local_shipping\",\n          cols: 1,\n          rows: 1,\n        }, //classname css reference  // bg_icon_name mat icon names    //classname css reference\n        {\n          title: \"Earnings\",\n          classname: \"total-earnings\",\n          bg_icon_name: \"monetization_on\",\n          cols: 1,\n          rows: 1,\n        },\n        {\n          title: \"Orders\",\n          classname: \"total-orders\",\n          bg_icon_name: \"account_balance\",\n          cols: 1,\n          rows: 1,\n        },\n        {\n          title: \"Returns\",\n          classname: \"returns\",\n          bg_icon_name: \"backspace\",\n          cols: 1,\n          rows: 1,\n        },\n        {\n          title: \"Orders List\",\n          classname: \"\",\n          bg_icon_name: \"local_shipping\",\n          cols: 3,\n          rows: 3,\n        },\n        {\n          title: \"Profile\",\n          classname: \"\",\n          bg_icon_name: \"account_circle\",\n          cols: 1,\n          rows: 3,\n        },\n        {\n          title: \"Product Inventory\",\n          classname: \"\",\n          bg_icon_name: \"add_shopping_cart\",\n          cols: 4,\n          rows: 3,\n        },\n      ];\n    })\n  );\n}\n","<div class=\"grid-container\">\n  <mat-grid-list cols=\"4\" rowHeight=\"175px\">\n    <mat-grid-tile\n      *ngFor=\"let card of cards | async\"\n      [colspan]=\"card.cols\"\n      [rowspan]=\"card.rows\"\n    >\n      <mat-card [ngClass]=\"['dashboard-card', card.classname]\">\n        <mat-card-header>\n          <mat-card-title>\n            {{ card.title }}\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"dashboard-card-content\">\n          <mat-icon class=\"new-orders-bg-img\">{{ card.bg_icon_name }}</mat-icon>\n\n          <div *ngIf=\"card.title == 'New Orders'\">\n            20 new orders\n            <mat-progress-bar mode=\"determinate\" value=\"40\"></mat-progress-bar>\n          </div>\n          <div *ngIf=\"card.title == 'Earnings'\">\n            $100 total earnings\n            <mat-progress-bar mode=\"determinate\" value=\"70\"></mat-progress-bar>\n          </div>\n          <div *ngIf=\"card.title == 'Orders'\">\n            200 orders so far\n          </div>\n          <div *ngIf=\"card.title == 'Returns'\">\n            2 Returns\n            <mat-progress-bar\n              mode=\"determinate\"\n              value=\"10\"\n              color=\"warn\"\n            ></mat-progress-bar>\n          </div>\n\n          <!-- order list table card  -->\n          <div *ngIf=\"card.title == 'Orders List'\">\n            <orders-table></orders-table>\n          </div>\n          <!-- order list table card  -->\n\n          <!-- order list table card  -->\n          <div *ngIf=\"card.title == 'Product Inventory'\">\n            <app-products-table></app-products-table>\n          </div>\n          <!-- order list table card  -->\n        </mat-card-content>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\n\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Sort } from \"@angular/material/sort\";\nimport { Orders, ApiResponse } from \"src/app/common/_models/products\";\nimport { DetailComponent } from \"../../orders/order-detail/detail.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { FarmerService } from \"src/app/common/services/farmer.service\";\nimport { first } from \"rxjs/operators\";\n\n@Component({\n  selector: \"orders-table\",\n  templateUrl: \"./order-table.component.html\",\n  styleUrls: [\"./order-table.component.css\"],\n})\nexport class OrderTableComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"order_number\",\n    \"status\",\n    \"quantity\",\n    \"totalprice\",\n    \"detailaction\",\n  ];\n\n  dataSource = [];\n  sortedData: MatTableDataSource<Orders>;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  constructor(public dialog: MatDialog, private farmerService: FarmerService) {\n    this.sortedData = new MatTableDataSource(this.dataSource);\n  }\n  ngOnInit() {\n    this.farmerService\n      .getOrders()\n      .pipe(first()) //pipe(first()) automatically unsubscribes from the observable after returning the first item\n      .subscribe(\n        (data: ApiResponse) => {\n          console.log(data);\n          this.dataSource = data.data;\n          this.sortedData = new MatTableDataSource(this.dataSource);\n          this.sortedData.paginator = this.paginator;\n        },\n        (error) => {\n          console.log(error.error);\n        }\n      );\n  }\n  sortData(sort: Sort) {\n    const data = this.dataSource.slice();\n    if (!sort.active || sort.direction === \"\") {\n      this.sortedData = new MatTableDataSource(data);\n      return;\n    }\n\n    const sorteddata = data.sort((a, b) => {\n      const isAsc = sort.direction === \"asc\";\n      switch (sort.active) {\n        case \"order_number\":\n          return compare(a._id, b._id, isAsc);\n        case \"totalprice\":\n          return compare(a.products.totalprice, b.products.totalprice, isAsc);\n        case \"quantity\":\n          return compare(a.products.quantity, b.products.quantity, isAsc);\n        case \"status\":\n          return compare(a.status, b.status, isAsc);\n        default:\n          return 0;\n      }\n    });\n    this.sortedData = new MatTableDataSource(sorteddata);\n    this.sortedData.paginator = this.paginator;\n  }\n\n  openOrderDetailDialog(order) {\n    const dialogRef = this.dialog.open(DetailComponent, {\n      data: order,\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(result);\n      if (result != \"close\") {\n        this.dataSource = this.dataSource.map((item) => {\n          if (item[\"_id\"] == order._id) {\n            return { ...item, status: result };\n          }\n          return item;\n        });\n\n        this.sortedData = new MatTableDataSource(this.dataSource);\n        if (this.sortedData.paginator) {\n          this.sortedData.paginator.firstPage();\n        }\n      }\n    });\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    const filteredData = this.dataSource.filter((data) =>\n      data.status.toLowerCase().includes(filterValue.toLowerCase())\n    );\n\n    this.sortedData = new MatTableDataSource(filteredData);\n    this.sortedData.paginator = this.paginator;\n  }\n}\n\nfunction compare(a: number | string, b: number | string, isAsc: boolean) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","<div class=\"order-table-container\">\n  <mat-form-field class=\"filter-form\">\n    <mat-label>Filter</mat-label>\n    <input\n      matInput\n      (keyup)=\"applyFilter($event)\"\n      placeholder=\"Ex. Abebe Bikila\"\n      #input\n    />\n  </mat-form-field>\n  <table\n    mat-table\n    [dataSource]=\"sortedData\"\n    matSort\n    (matSortChange)=\"sortData($event)\"\n  >\n    <!-- customer Name Column -->\n    <ng-container matColumnDef=\"order_number\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header=\"order_number\">\n        Order No.\n      </th>\n      <td mat-cell *matCellDef=\"let element\">{{ element._id }}</td>\n    </ng-container>\n\n    <!-- order_number Column -->\n    <ng-container matColumnDef=\"status\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header=\"status\">\n        Status\n      </th>\n      <td mat-cell *matCellDef=\"let element\">{{ element.status }}</td>\n    </ng-container>\n\n    <!-- status Column -->\n    <ng-container matColumnDef=\"quantity\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header=\"quantity\">\n        Quantity\n      </th>\n      <td mat-cell *matCellDef=\"let element\">\n        {{ element.products.quantity }}\n      </td>\n    </ng-container>\n\n    <!-- amount Column -->\n    <ng-container matColumnDef=\"totalprice\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header=\"totalprice\">\n        Totalprice\n      </th>\n      <td mat-cell *matCellDef=\"let element\">\n        {{ element.products.totalprice }}\n      </td>\n    </ng-container>\n\n    <!--add course button -->\n    <ng-container matColumnDef=\"detailaction\">\n      <th mat-header-cell *matHeaderCellDef>\n        Details\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <button\n          mat-stroked-button\n          color=\"primary\"\n          (click)=\"openOrderDetailDialog(row)\"\n        >\n          Detail\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n  </table>\n\n  <mat-paginator\n    showFirstLastButtons\n    [length]=\"20\"\n    [pageSize]=\"5\"\n  ></mat-paginator>\n  <!-- [pageSizeOptions]=\"[5, 10, 25, 100]\" -->\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators, FormControl } from \"@angular/forms\";\nimport { FarmerService } from \"src/app/common/services/farmer.service\";\n\n@Component({\n  selector: \"app-add-product-dialog\",\n  templateUrl: \"./add-product-dialog.component.html\",\n  styleUrls: [\"./add-product-dialog.component.css\"],\n})\nexport class AddProductDialogComponent implements OnInit {\n  addProductForm;\n  constructor(private fb: FormBuilder, private farmerService: FarmerService) {\n    this.addProductForm = fb.group({\n      name: [\"\", Validators.required],\n      price: [\"\", Validators.required],\n      quantity: [\"\", Validators.required],\n      photo: [\"\", [Validators.required, this.validFileExtensions]],\n      description: [\"\", Validators.required],\n    });\n  }\n\n  get photo() {\n    return this.addProductForm.get(\"photo\");\n  }\n  get name() {\n    return this.addProductForm.get(\"name\");\n  }\n\n  ngOnInit(): void {}\n  onAddProduct(productImageRef) {\n    const formData = new FormData();\n    formData.append(\n      \"image\",\n      productImageRef.files[0],\n      productImageRef.files[0][\"name\"]\n    );\n    formData.append(\"name\", this.addProductForm.value.name);\n    formData.append(\"price\", this.addProductForm.value.price);\n    formData.append(\"quantity\", this.addProductForm.value.quantity);\n \n    formData.append(\"description\", this.addProductForm.value.description);\n    this.farmerService.addProduct(formData).subscribe(\n      (data) => {\n        console.log(data);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n  validFileExtensions(control: FormControl) {\n    if (\n      control.value.endsWith(\".jpeg\") ||\n      control.value.endsWith(\".jpg\") ||\n      control.value.endsWith(\".png\")\n    ) {\n      return null;\n    }\n\n    return { invalid: true };\n  }\n}\n","<div class=\"add-product-dialog-container\">\n  <h2 mat-dialog-title>Add Product</h2>\n  <mat-dialog-content class=\"mat-typography\">\n    <form [formGroup]=\"addProductForm\">\n      <p>\n        <mat-form-field appearance=\"outline\" class=\"product-form-full-width\">\n          <mat-label>Name</mat-label>\n          <input\n            type=\"text\"\n            matInput\n            placeholder=\"Ex. Avocado...\"\n            formControlName=\"name\"\n          />\n\n          <mat-hint>Add Product name</mat-hint>\n          <mat-error *ngIf=\"name.hasError('required')\">\n            Name is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n      </p>\n      <p>\n        <mat-form-field appearance=\"outline\" class=\"product-form-full-width\">\n          <mat-label>Price</mat-label>\n          <input\n            type=\"number\"\n            matInput\n            placeholder=\"Ex. $12\"\n            formControlName=\"price\"\n          />\n          <span matPrefix>$&nbsp;</span>\n          <span matSuffix>.00</span>\n          <mat-hint>Add Product price</mat-hint>\n        </mat-form-field>\n      </p>\n      <p>\n        <mat-form-field appearance=\"outline\" class=\"product-form-full-width\">\n          <mat-label>Quantity</mat-label>\n          <input\n            type=\"number\"\n            matInput\n            placeholder=\"Ex. 20\"\n            formControlName=\"quantity\"\n          />\n\n          <mat-hint>Add Product quantity</mat-hint>\n        </mat-form-field>\n      </p>\n\n      <div class=\"product-form-full-width\">\n        <mat-label>Photo </mat-label>\n        <!-- <label for=\"uploadPicture\" class=\"upload-file\">\n          <mat-icon>add_a_photo</mat-icon>\n        </label> -->\n\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          [hidden]=\"true\"\n          #files\n          formControlName=\"photo\"\n        />\n        <mat-hint *ngIf=\"!files.files[0]\"> Add Product Photo </mat-hint>\n        <mat-hint *ngIf=\"files.files[0]\">{{ files.files[0][\"name\"] }}</mat-hint>\n        <button class=\"btn-addphoto\" mat-button (click)=\"files.click()\">\n          <mat-icon>add_a_photo</mat-icon>\n        </button>\n\n        <mat-error\n          *ngIf=\"photo.hasError('invalid') && !photo.hasError('required')\"\n        >\n          Please enter a valid Photo\n        </mat-error>\n        <!-- <mat-error *ngIf=\"photo.hasError('required')\">\n          Photo is <strong>required</strong>\n        </mat-error> -->\n      </div>\n\n      <p>\n        <mat-form-field appearance=\"outline\" class=\"product-form-full-width\">\n          <mat-label>Description</mat-label>\n\n          <textarea\n            matInput\n            placeholder=\"Ex. It is...\"\n            formControlName=\"description\"\n          ></textarea>\n          <mat-hint>Add Product description</mat-hint>\n        </mat-form-field>\n      </p>\n    </form>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button mat-button mat-dialog-close>Cancel</button>\n    <button\n      mat-button\n      color=\"primary\"\n      [mat-dialog-close]=\"true\"\n      (click)=\"onAddProduct(files)\"\n      [disabled]=\"!addProductForm.valid\"\n    >\n      Add Product\n    </button>\n  </mat-dialog-actions>\n</div>\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport {\n  PeriodicElement,\n  Product,\n  ApiResponse,\n} from \"src/app/common/_models/products\";\nimport { Sort } from \"@angular/material/sort\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { AddProductDialogComponent } from \"../add-product-dialog/add-product-dialog.component\";\nimport { FarmerService } from \"src/app/common/services/farmer.service\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatTableDataSource } from \"@angular/material/table\";\n\n@Component({\n  selector: \"app-products-table\",\n  templateUrl: \"./products-table.component.html\",\n  styleUrls: [\"./products-table.component.css\"],\n})\nexport class ProductsTableComponent {\n  displayedColumns: string[] = [\n    \"photo\",\n    \"name\",\n    \"price\",\n    \"quantity\",\n    \"addproduct\",\n  ];\n  dataSource;\n  sortedData: MatTableDataSource<Product>;\n  constructor(public dialog: MatDialog, private farmerService: FarmerService) {\n    // this.sortedData = this.dataSource.slice();\n  }\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  ngOnInit(): void {\n    this.farmerService.getProducts().subscribe(\n      (res: ApiResponse) => {\n        this.dataSource = res.data;\n        this.sortedData = new MatTableDataSource(this.dataSource);\n        this.sortedData.paginator = this.paginator;\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  addProductDialog() {\n    const dialogRef = this.dialog.open(AddProductDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\n\n  sortData(sort: Sort) {\n    const data = this.dataSource.slice();\n    if (!sort.active || sort.direction === \"\") {\n      this.sortedData = new MatTableDataSource(data);\n      return;\n    }\n\n    const sorteddata = data.sort((a, b) => {\n      const isAsc = sort.direction === \"asc\";\n      switch (sort.active) {\n        case \"name\":\n          return compare(a.name, b.name, isAsc);\n        case \"price\":\n          return compare(a.price, b.price, isAsc);\n        case \"quantity\":\n          return compare(a.quantity, b.quantity, isAsc);\n\n        default:\n          return 0;\n      }\n    });\n    this.sortedData = new MatTableDataSource(sorteddata);\n    this.sortedData.paginator = this.paginator;\n  }\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    const filteredData = this.dataSource.filter((data) =>\n      data.name.toLowerCase().includes(filterValue.toLowerCase())\n    );\n    this.sortedData = new MatTableDataSource(filteredData);\n    this.sortedData.paginator = this.paginator;\n  }\n}\nconst ELEMENT_DATA: Product[] = [];\nfunction compare(a: number | string, b: number | string, isAsc: boolean) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","<div class=\"productlist-table-container\">\n  <mat-form-field class=\"filter-form\">\n    <mat-label>Filter</mat-label>\n    <input\n      matInput\n      (keyup)=\"applyFilter($event)\"\n      placeholder=\"Ex. Abebe Bikila\"\n      #input\n    />\n  </mat-form-field>\n  <table\n    mat-table\n    [dataSource]=\"sortedData\"\n    matSort\n    (matSortChange)=\"sortData($event)\"\n  >\n    <!-- Position Column -->\n    <ng-container matColumnDef=\"photo\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header=\"position\">\n        photo\n      </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <img\n          alt=\"image\"\n          class=\"product-img\"\n          width=\"40\"\n          height=\"50\"\n          [src]=\"element.photo\"\n        />\n      </td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header=\"name\">\n        Name\n      </th>\n      <td mat-cell *matCellDef=\"let element\">{{ element.name }}</td>\n    </ng-container>\n\n    <!-- Weight Column -->\n    <ng-container matColumnDef=\"price\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header=\"price\">Price</th>\n      <td mat-cell *matCellDef=\"let element\">{{ element.price }}</td>\n    </ng-container>\n\n    <!-- Symbol Column -->\n    <ng-container matColumnDef=\"quantity\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header=\"quantity\">\n        Quantity\n      </th>\n      <td mat-cell *matCellDef=\"let element\">{{ element.quantity }}</td>\n    </ng-container>\n\n    <!--add course button -->\n    <ng-container matColumnDef=\"addproduct\">\n      <th mat-header-cell *matHeaderCellDef>\n        <button\n          mat-mini-fab\n          color=\"primary\"\n          (click)=\"addProductDialog()\"\n          matTooltip=\"Add Product\"\n        >\n          <mat-icon>add</mat-icon>\n        </button>\n      </th>\n      <td mat-cell *matCellDef=\"let row\"></td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n  </table>\n\n  <mat-paginator\n    showFirstLastButtons\n    [pageSizeOptions]=\"[5, 8]\"\n  ></mat-paginator>\n  <!-- [pageSizeOptions]=\"[5, 10, 25, 100]\" -->\n</div>\n","import { Component, OnInit, Inject } from \"@angular/core\";\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { Orders, ApiResponse } from \"src/app/common/_models/products\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { FarmerService } from \"src/app/common/services/farmer.service\";\nimport { first } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-detail\",\n  templateUrl: \"./detail.component.html\",\n  styleUrls: [\"./detail.component.css\"],\n})\nexport class DetailComponent implements OnInit {\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: Orders,\n    private farmerService: FarmerService\n  ) {}\n  orderStatus = [\n    { value: \"ready\", viewValue: \"Ready\" },\n    { value: \"complete\", viewValue: \"Completed\" },\n  ];\n  statusUpdateControl = new FormControl(\"\", Validators.required);\n  ngOnInit(): void {}\n  updateOrderStatus() {\n    this.farmerService\n      .updateOrders(this.data._id, this.statusUpdateControl.value)\n      .pipe(first()) //pipe(first()) automatically unsubscribes from the observable after returning the first item\n      .subscribe(\n        (data: ApiResponse) => {\n          console.log(data);\n        },\n        (error) => {\n          console.log(error.error);\n        }\n      );\n  }\n}\n","<div class=\"orderDetailContainer\" style=\"width: 25vw;\">\n  <h1 mat-dialog-title>Update Order Status</h1>\n  <h3 mat-dialog-title>order no # {{ data._id }}</h3>\n\n  <mat-dialog-content>\n    <mat-list role=\"list\" *ngFor=\"let item of data.products.items\">\n      <mat-list-item role=\"listitem\"\n        >{{ item.name }}\n        <span style=\"padding-right: 40px;\">\n          <strong> ({{ item.quantity }})</strong></span\n        >\n      </mat-list-item>\n    </mat-list>\n    <hr />\n    <mat-list role=\"list\">\n      <mat-list-item role=\"listitem\"\n        >total quantity\n        <span style=\"padding-left: 40px;\">\n          <strong>{{ data.products.quantity }}</strong></span\n        >\n      </mat-list-item>\n\n      <mat-list-item role=\"listitem\"\n        >total price\n        <span style=\"padding-left: 40px;\">\n          <strong>{{ data.products.totalprice }}</strong></span\n        >\n      </mat-list-item>\n      <mat-list-item role=\"listitem\"\n        >order status\n        <span style=\"padding-left: 40px;\">\n          <strong>{{ data.status }}</strong></span\n        >\n      </mat-list-item>\n    </mat-list>\n    <hr />\n    <h4>Update order status</h4>\n\n    <mat-form-field appearance=\"fill\" style=\"width: 75%;\">\n      <mat-label>Order status</mat-label>\n      <mat-select [formControl]=\"statusUpdateControl\" required>\n        <mat-option *ngFor=\"let status of orderStatus\" [value]=\"status.value\">\n          {{ status.viewValue }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf=\"statusUpdateControl.hasError('required')\"\n        >Please choose a status</mat-error\n      >\n    </mat-form-field>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button mat-button [mat-dialog-close]=\"'close'\">Cancel</button>\n    <button\n      mat-button\n      [mat-dialog-close]=\"statusUpdateControl.value\"\n      (click)=\"updateOrderStatus()\"\n      [disabled]=\"!statusUpdateControl.valid\"\n    >\n      Update\n    </button>\n  </mat-dialog-actions>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-order-list',\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./order-list.component.css']\n})\nexport class OrderListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"order-list-container\">\n  <orders-table></orders-table>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-products-list',\n  templateUrl: './products-list.component.html',\n  styleUrls: ['./products-list.component.css']\n})\nexport class ProductsListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"pro-list-container\">\n  <app-products-table></app-products-table>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { UserProfile } from \"src/app/common/_models/user\";\n\n@Component({\n  selector: \"app-sidenav\",\n  templateUrl: \"./sidenav.component.html\",\n  styleUrls: [\"./sidenav.component.css\"],\n})\nexport class SidenavComponent implements OnInit {\n  @Input() profile: UserProfile;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"sidenav-container\">\n  <div class=\"sidenav-logo\">\n    <h1>Farmer Market</h1>\n  </div>\n\n  <div class=\"sidenav-user\">\n    <div>\n      <img\n        src=\"https://storage.googleapis.com/farmermarket/defaultprofile.png\"\n        alt=\"\"\n        srcset=\"\"\n        class=\"sidenav-user-img\"\n      />\n    </div>\n\n    <div class=\"sidenav-user-detail\">\n      <div class=\"sidenav-user-detail-name\">\n        {{ profile?.firstname }} {{ profile?.lastname }}\n      </div>\n      <div class=\"sidenav-user-detail-role\">farmer</div>\n    </div>\n  </div>\n\n  <mat-nav-list class=\"sidenav-menu-list\">\n    <a mat-list-item routerLink=\".\" class=\"sidenav-menu-list-link\">\n      New Orders\n    </a>\n    <a mat-list-item [routerLink]=\"['/products']\" class=\"sidenav-menu-list-link\"\n      >Products</a\n    >\n    <a mat-list-item routerLink=\".\" class=\"sidenav-menu-list-link\"\n      >Add Product</a\n    >\n    <a mat-list-item [routerLink]=\"['/orders']\" class=\"sidenav-menu-list-link\"\n      >Orders</a\n    >\n  </mat-nav-list>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { AuthService } from \"src/app/common/services/auth.service\";\nimport { Router } from \"@angular/router\";\nimport { UserProfile } from \"src/app/common/_models/user\";\n\n@Component({\n  selector: \"app-dashboard\",\n  templateUrl: \"./dashboard.component.html\",\n  styleUrls: [\"./dashboard.component.css\"],\n})\nexport class DashboardComponent implements OnInit {\n  userProfile: UserProfile;\n  constructor(private authService: AuthService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.authService.getMe().subscribe(\n      (res: any) => {\n        this.userProfile = res.data;\n      },\n      (error) => {\n        console.log(error.error);\n        this.userProfile = { firstname: \"\", lastname: \"\", picture: \"url\" };\n      }\n    );\n  }\n\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate([\"/login\"]);\n  }\n}\n","<body>\n  <mat-drawer-container class=\"dashboard-container\">\n    <!-- sid nav -->\n    <mat-drawer\n      #drawer\n      mode=\"side\"\n      opened\n      class=\"dashboard-drawer\"\n      role=\"navigation\"\n    >\n      <mat-nav-list>\n        <app-sidenav [profile]=\"userProfile\"></app-sidenav>\n      </mat-nav-list>\n    </mat-drawer>\n    <!-- sid nav -->\n    <mat-drawer-content>\n      <!-- navbar -->\n      <div>\n        <mat-toolbar class=\"navbar\">\n          <button\n            mat-icon-button\n            class=\"navbar-link\"\n            aria-label=\"Example icon-button with menu icon\"\n          >\n            <mat-icon (click)=\"drawer.toggle()\">menu</mat-icon>\n          </button>\n          <span>\n            <a mat-list-item [routerLink]=\"['/']\" class=\"menu-tab-list\">\n              Farmer Market\n            </a>\n          </span>\n          <span class=\"navbar-spacer\"></span>\n          <button\n            mat-icon-button\n            class=\"navbar-link mail_outline\"\n            aria-label=\"emails\"\n            matBadge=\"0\"\n            matBadgePosition=\"before\"\n          >\n            <mat-icon>mail_outline</mat-icon>\n          </button>\n          <button\n            mat-icon-button\n            class=\"navbar-link notifications_none\"\n            aria-label=\"orders notifications\"\n            matBadge=\"0\"\n            matBadgePosition=\"before\"\n            matBadgeColor=\"warn\"\n          >\n            <mat-icon>notifications_none</mat-icon>\n          </button>\n\n          <button\n            mat-icon-button\n            class=\"navbar-link\"\n            aria-label=\"Account activity\"\n            [matMenuTriggerFor]=\"menu\"\n          >\n            <mat-icon mat-card-avatar class=\"navbar-user-image\"></mat-icon>\n          </button>\n          <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"onLogout()\">Logout</button>\n            <button mat-menu-item>\"\"</button>\n          </mat-menu>\n        </mat-toolbar>\n      </div>\n      <!-- navbar -->\n\n      <router-outlet></router-outlet>\n      <!-- router-outlet -->\n    </mat-drawer-content>\n  </mat-drawer-container>\n</body>\n","import { NgModule, Component } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { DashboardComponent } from \"./components/dashboard.component\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { HomeDashboardComponent } from \"./components/UI/home-dashboard/home-dashboard.component\";\nimport { AngularMaterialModule } from \"../angular-material/angular-material.module\";\nimport { OrderTableComponent } from \"./components/UI/home-dashboard/orders/order-table.component\";\nimport { SidenavComponent } from \"./components/UI/sidenav/sidenav.component\";\nimport { ProductsTableComponent } from \"./components/UI/home-dashboard/product/product-table/products-table.component\";\nimport { AddProductDialogComponent } from \"./components/UI/home-dashboard/product/add-product-dialog/add-product-dialog.component\";\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\nimport { ProductsListComponent } from \"./components/UI/products/products-list.component\";\nimport { OrderListComponent } from \"./components/UI/orders/order-list.component\";\nimport { DetailComponent } from \"./components/UI/orders/order-detail/detail.component\";\n\n@NgModule({\n  declarations: [\n    DashboardComponent,\n    HomeDashboardComponent,\n    OrderTableComponent,\n    SidenavComponent,\n    ProductsTableComponent,\n    AddProductDialogComponent,\n    ProductsListComponent,\n    OrderListComponent,\n    DetailComponent,\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: \"\",\n        component: DashboardComponent,\n        children: [\n          { path: \"\", component: HomeDashboardComponent },\n          { path: \"orders\", component: OrderListComponent },\n          { path: \"products\", component: ProductsListComponent },\n        ],\n      },\n    ]),\n    AngularMaterialModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  exports: [DashboardComponent, HomeDashboardComponent],\n})\nexport class FarmerdashboardModule {}\n"]}