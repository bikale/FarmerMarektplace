{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/common/components/auth/forgetPassword/forgetpassworddialog.component.ts","./src/app/common/components/auth/forgetPassword/forgetpassworddialog.component.html","./src/app/common/components/auth/login.component.ts","./src/app/common/components/auth/login.component.html","./src/app/common/components/auth/resetpassword/resetpassword.component.ts","./src/app/common/components/auth/resetpassword/resetpassword.component.html","./src/app/common/components/auth/signup.component.ts","./src/app/common/components/auth/signup.component.html","./src/app/common/guards/access.guard.ts","./src/app/common/guards/superuser.guard.ts","./src/app/common/interceptors/http.interceptor.ts","./src/app/common/services/auth.service.ts","./src/app/modules/angular-material/angular-material.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { LoginComponent } from \"./common/components/auth/login.component\";\nimport { SignupComponent } from \"./common/components/auth/signup.component\";\nimport { AccessGuard } from \"./common/guards/access.guard\";\nimport { SuperuserGuard } from \"./common/guards/superuser.guard\";\nimport { ResetpasswordComponent } from \"./common/components/auth/resetpassword/resetpassword.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    loadChildren: () =>\n      import(\"./modules/farmer-module/farmerdashboard.module\").then(\n        (module) => module.FarmerdashboardModule\n      ),\n    canActivate: [AccessGuard],\n  },\n  {\n    path: \"super\",\n    loadChildren: () =>\n      import(\"./modules/super-user/super-user.module\").then(\n        (module) => module.SuperUserModule\n      ),\n    canActivate: [SuperuserGuard],\n  },\n  { path: \"login\", component: LoginComponent },\n  { path: \"signup\", component: SignupComponent },\n  { path: \"resetpassword/:resettoken\", component: ResetpasswordComponent },\n  { path: \"**\", redirectTo: \"\", pathMatch: \"full\" },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"farmermarket\";\n}\n","<!-- <app-login></app-login> -->\n<!-- <app-signup></app-signup> -->\n\n<router-outlet> </router-outlet>\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\n\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AngularMaterialModule } from \"./modules/angular-material/angular-material.module\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\n\nimport { LoginComponent } from \"./common/components/auth/login.component\";\nimport { SignupComponent } from \"./common/components/auth/signup.component\";\nimport { HttpRequestInterceptor } from \"./common/interceptors/http.interceptor\";\nimport { ForgetpassworddialogComponent } from './common/components/auth/forgetPassword/forgetpassworddialog.component';\nimport { ResetpasswordComponent } from './common/components/auth/resetpassword/resetpassword.component';\n\n@NgModule({\n  declarations: [AppComponent, LoginComponent, SignupComponent, ForgetpassworddialogComponent, ResetpasswordComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpRequestInterceptor,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { AuthService } from \"src/app/common/services/auth.service\";\n\n@Component({\n  selector: \"app-forgetpassworddialog\",\n  templateUrl: \"./forgetpassworddialog.component.html\",\n  styleUrls: [\"./forgetpassworddialog.component.css\"],\n})\nexport class ForgetpassworddialogComponent implements OnInit {\n  message: string = null;\n  error: string = null;\n\n  forgetEmailControl = new FormControl(\"\", [\n    Validators.required,\n    Validators.email,\n  ]);\n  constructor(private authService: AuthService) {}\n\n  ngOnInit(): void {}\n  onForgetPassword() {\n    this.message = null;\n    this.error = null;\n    this.authService.forgetPassword(this.forgetEmailControl.value).subscribe(\n      (data) => {\n        this.message = \"Email Sent Check your email please\";\n      },\n      (error) => {\n        this.error = \"There is no account with this email\";\n      }\n    );\n  }\n}\n","<div class=\"forgetpasswordcontainer\">\n  <h1 mat-dialog-title>Forget password ?</h1>\n  <mat-dialog-content class=\"mat-typography\">\n    <p>\n      Please provide your email address\n    </p>\n    <p>and we will send you a link in ur email</p>\n    <mat-error *ngIf=\"message\">\n      {{ message }}\n    </mat-error>\n    <mat-error *ngIf=\"error\">\n      {{ error }}\n    </mat-error>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Enter your email</mat-label>\n      <input\n        matInput\n        placeholder=\"farmer@farmer.com\"\n        [formControl]=\"forgetEmailControl\"\n        required\n      />\n\n      <mat-error\n        *ngIf=\"\n          forgetEmailControl.hasError('email') &&\n          !forgetEmailControl.hasError('required')\n        \"\n      >\n        Please enter a valid email address\n      </mat-error>\n      <mat-error *ngIf=\"forgetEmailControl.hasError('required')\">\n        Email is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button mat-button mat-dialog-close>Cancel</button>\n    <button\n      mat-button\n      (click)=\"onForgetPassword()\"\n      [disabled]=\"!forgetEmailControl.valid\"\n    >\n      Submit\n    </button>\n  </mat-dialog-actions>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../services/auth.service\";\nimport { first } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport { ApiResponse } from \"../../_models/products\";\nimport { ForgetpassworddialogComponent } from \"./forgetPassword/forgetpassworddialog.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"],\n})\nexport class LoginComponent implements OnInit {\n  hide = true;\n  loginform;\n  loading;\n  error: any;\n  constructor(\n    formbuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    public dialog: MatDialog\n  ) {\n    this.loginform = formbuilder.group({\n      email: [\"\", Validators.compose([Validators.required, Validators.email])],\n      password: [\"\", Validators.required],\n    });\n  }\n  openforgetpasswordDialog() {\n    this.dialog.open(ForgetpassworddialogComponent);\n  }\n\n  ngOnInit(): void {}\n  onLogin() {\n    // stop here if form is invalid\n    if (this.loginform.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.authService\n      .login(this.loginform.value)\n      .pipe(first()) //pipe(first()) automatically unsubscribes from the observable after returning the first item\n      .subscribe(\n        (data: ApiResponse) => {\n          if (data.role == \"super\") {\n            this.router.navigate([\"super\"]);\n          } else {\n            this.router.navigate([\"/\"]);\n          }\n        },\n        (error) => {\n          console.log(error.error);\n          this.error = error;\n          this.loading = false;\n        }\n      );\n  }\n}\n","<body>\n  <mat-card class=\"login-card\">\n    <mat-grid-list cols=\"5\" rowHeight=\"70vh\">\n      <mat-grid-tile colspan=\"3\" class=\"login-panel-left\"> </mat-grid-tile>\n      <mat-grid-tile colspan=\"2\">\n        <form [formGroup]=\"loginform\" (ngSubmit)=\"onLogin()\" class=\"login-form\">\n          <p>\n            <mat-error *ngIf=\"error\">\n              Please enter a valid email address and password\n            </mat-error>\n          </p>\n          <p>Please enter your email and password</p>\n\n          <p>\n            <mat-form-field appearance=\"outline\" class=\"login-form-full-width\">\n              <mat-label>Enter your email</mat-label>\n              <input\n                matInput\n                placeholder=\"Ex. email@example.com\"\n                formControlName=\"email\"\n              />\n              <mat-icon matSuffix>email</mat-icon>\n\n              <mat-error\n                *ngIf=\"\n                  loginform.get('email').hasError('email') &&\n                  !loginform.get('email').hasError('required')\n                \"\n              >\n                Please enter a valid email address\n              </mat-error>\n              <mat-error *ngIf=\"loginform.get('email').hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <p>\n            <mat-form-field appearance=\"outline\" class=\"login-form-full-width\">\n              <mat-label>Enter your password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"password\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error *ngIf=\"loginform.get('password').hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <button\n            mat-flat-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!loginform.valid\"\n          >\n            login\n          </button>\n          <div style=\"padding-top: 20px;\">\n            <a mat-button (click)=\"openforgetpasswordDialog()\"\n              >Forget password ?</a\n            >\n          </div>\n          <div style=\"padding-top: 70px;\">\n            <a mat-button [routerLink]=\"['/signup']\">Create an account</a>\n          </div>\n        </form>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n</body>\n","import { Component, OnInit } from \"@angular/core\";\nimport { first, flatMap } from \"rxjs/operators\";\nimport { FormControl, Validators, FormBuilder } from \"@angular/forms\";\nimport { Router, ActivatedRoute, ParamMap } from \"@angular/router\";\nimport { AuthService } from \"src/app/common/services/auth.service\";\nimport { of } from \"rxjs\";\n\n@Component({\n  selector: \"app-resetpassword\",\n  templateUrl: \"./resetpassword.component.html\",\n  styleUrls: [\"./resetpassword.component.css\"],\n})\nexport class ResetpasswordComponent implements OnInit {\n  hide = true;\n  reset_password_form;\n  error;\n  loading;\n  resetToken: string;\n  constructor(\n    private formbuilder: FormBuilder,\n    private authService: AuthService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    this.reset_password_form = formbuilder.group({\n      password: [\"\", Validators.required],\n      confirmpassword: [\n        \"\",\n        [Validators.required, this.confirmPasswordValidator],\n      ],\n    });\n  }\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe((params: ParamMap) => {\n      this.resetToken = params.get(\"resettoken\");\n    });\n  }\n\n  onResetPassword() {\n    console.log(this.reset_password_form.value, this.resetToken);\n    this.authService\n      .resetPassword({\n        ...this.reset_password_form.value,\n        resettoken: this.resetToken,\n      })\n      .pipe(first()) //pipe(first()) automatically unsubscribes from the observable after returning the first item\n      .subscribe(\n        (data) => {\n          this.router.navigate([\"/\"]);\n        },\n        (error) => {\n          console.log(error.error);\n          this.error = \"Invalid Token\";\n          this.loading = false;\n        }\n      );\n  }\n\n  confirmPasswordValidator = (\n    control: FormControl\n  ): { [s: string]: boolean } => {\n    if (control.value === this.reset_password_form?.value.password) {\n      return null;\n    }\n    return { invalid: true };\n  };\n}\n","<body>\n  <mat-card class=\"register-card\">\n    <mat-grid-list cols=\"4\" rowHeight=\"70vh\">\n      <mat-grid-tile colspan=\"2\">\n        <form\n          [formGroup]=\"reset_password_form\"\n          (ngSubmit)=\"onResetPassword()\"\n          class=\"register-form\"\n        >\n          <h2><strong>Reset Password Form</strong></h2>\n          <p>\n            <mat-error *ngIf=\"error\">\n              {{ error }}\n            </mat-error>\n          </p>\n          <table class=\"register-form-full-width\" cellspacing=\"0\">\n            <tr></tr>\n          </table>\n\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Create new password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"password\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error\n                *ngIf=\"reset_password_form.get('password').hasError('required')\"\n              >\n                Password is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Confirm password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"confirmpassword\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error\n                *ngIf=\"\n                  reset_password_form\n                    .get('confirmpassword')\n                    .hasError('required')\n                \"\n              >\n                Confirm password is <strong>required</strong>\n              </mat-error>\n              <mat-error\n                *ngIf=\"\n                  reset_password_form\n                    .get('confirmpassword')\n                    .hasError('invalid') &&\n                  !reset_password_form\n                    .get('confirmpassword')\n                    .hasError('required')\n                \"\n              >\n                Password <strong>do not match</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n\n          <button\n            mat-flat-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!reset_password_form.valid\"\n          >\n            Submit\n          </button>\n\n          <div style=\"padding-top: 70px;\">\n            Goto login ?\n            <a [routerLink]=\"['/login']\">Login</a>\n          </div>\n        </form>\n      </mat-grid-tile>\n\n      <mat-grid-tile colspan=\"2\" class=\"register-panel-right\">\n        Welcome to Farmer market\n        <mat-icon>market</mat-icon>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n</body>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  AsyncValidatorFn,\n  EmailValidator,\n  FormGroup,\n} from \"@angular/forms\";\nimport { of, timer } from \"rxjs\";\nimport { debounceTime, map, flatMap, first } from \"rxjs/operators\";\nimport { AuthService } from \"../../services/auth.service\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"app-signup\",\n  templateUrl: \"./signup.component.html\",\n  styleUrls: [\"./signup.component.css\"],\n})\nexport class SignupComponent {\n  hide = true;\n  sign_up_form;\n  error;\n  loading;\n  constructor(\n    private formbuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.sign_up_form = formbuilder.group({\n      firstname: [\"\", Validators.required],\n      lastname: [\"\", Validators.required],\n      email: [\"\", [Validators.required], [this.emailExistValidator]],\n      password: [\"\", Validators.required],\n      confirmpassword: [\n        \"\",\n        [Validators.required, this.confirmPasswordValidator],\n      ],\n    });\n  }\n\n  get email() {\n    return this.sign_up_form.get(\"email\");\n  }\n\n  onsignUp() {\n    this.authService\n      .createAccount(this.sign_up_form.value)\n      .pipe(first()) //pipe(first()) automatically unsubscribes from the observable after returning the first item\n      .subscribe(\n        (data) => {\n          this.router.navigate([\"/\"]);\n        },\n        (error) => {\n          console.log(error.error);\n          this.error = error;\n          this.loading = false;\n        }\n      );\n  }\n\n  confirmPasswordValidator = (\n    control: FormControl\n  ): { [s: string]: boolean } => {\n    if (control.value === this.sign_up_form?.value.password) {\n      return null;\n    }\n    return { invalid: true };\n  };\n\n  emailExistValidator = (emailcontrol: AbstractControl) => {\n    return timer(1000).pipe(\n      flatMap((data) => {\n        if (\n          !emailcontrol.value.match(\"[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$\") // check the email pattern\n        ) {\n          return of({ email: true });\n        } else {\n          return this.authService.checkEmail(emailcontrol.value).pipe(\n            map((res: any) => {\n              if (res.success == true) {\n                return null;\n              } else {\n                return { emailexist: true };\n              }\n            })\n          );\n        }\n      })\n    );\n  };\n}\n","<body>\n  <mat-card class=\"register-card\">\n    <mat-grid-list cols=\"4\" rowHeight=\"70vh\">\n      <mat-grid-tile colspan=\"2\">\n        <form\n          [formGroup]=\"sign_up_form\"\n          (ngSubmit)=\"onsignUp()\"\n          class=\"register-form\"\n        >\n          <p>\n            <mat-error *ngIf=\"error\">\n              Please enter a valid information\n            </mat-error>\n          </p>\n          <table class=\"register-form-full-width\" cellspacing=\"0\">\n            <tr>\n              <td>\n                <mat-form-field class=\"register-form-full-width\">\n                  <mat-label>First name</mat-label>\n                  <input\n                    matInput\n                    placeholder=\"Ex. Abebe\"\n                    formControlName=\"firstname\"\n                  />\n                  <mat-error\n                    *ngIf=\"sign_up_form.get('firstname').hasError('required')\"\n                  >\n                    Firstname is <strong>required</strong>\n                  </mat-error>\n                </mat-form-field>\n              </td>\n              <td>\n                <mat-form-field class=\"register-form-full-width\">\n                  <mat-label>Last name</mat-label>\n                  <input\n                    matInput\n                    placeholder=\"Ex. Bikila\"\n                    formControlName=\"lastname\"\n                  />\n                  <mat-error\n                    *ngIf=\"sign_up_form.get('lastname').hasError('required')\"\n                  >\n                    Lastname is <strong>required</strong>\n                  </mat-error>\n                </mat-form-field>\n              </td>\n            </tr>\n          </table>\n\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Enter your email</mat-label>\n              <input\n                matInput\n                placeholder=\"Ex. email@example.com\"\n                formControlName=\"email\"\n              />\n              <mat-icon matSuffix>email</mat-icon>\n\n              <mat-error\n                *ngIf=\"\n                  sign_up_form.get('email').hasError('email') &&\n                  !sign_up_form.get('email').hasError('required')\n                \"\n              >\n                Please enter a valid email address\n              </mat-error>\n\n              <!-- check email exist  -->\n              <mat-error\n                *ngIf=\"\n                  sign_up_form.get('email').hasError('emailexist') &&\n                  !sign_up_form.get('email').hasError('email') &&\n                  !sign_up_form.get('email').hasError('required')\n                \"\n              >\n                <strong>Email already exist</strong>\n              </mat-error>\n\n              <!-- checking availablity exist  -->\n              <!-- <mat-error *ngIf=\"sign_up_form.pending\">\n                <strong> checking email availablity </strong>\n              </mat-error> -->\n\n              <mat-error *ngIf=\"sign_up_form.get('email').hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Create password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"password\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error\n                *ngIf=\"sign_up_form.get('password').hasError('required')\"\n              >\n                Password is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n          <p>\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"register-form-full-width\"\n            >\n              <mat-label>Confirm password</mat-label>\n              <input\n                matInput\n                [type]=\"hide ? 'password' : 'text'\"\n                formControlName=\"confirmpassword\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n              >\n                <mat-icon>{{\n                  hide ? \"visibility_off\" : \"visibility\"\n                }}</mat-icon>\n              </button>\n\n              <mat-error\n                *ngIf=\"sign_up_form.get('confirmpassword').hasError('required')\"\n              >\n                Confirm password is <strong>required</strong>\n              </mat-error>\n              <mat-error\n                *ngIf=\"\n                  sign_up_form.get('confirmpassword').hasError('invalid') &&\n                  !sign_up_form.get('confirmpassword').hasError('required')\n                \"\n              >\n                Password <strong>do not match</strong>\n              </mat-error>\n            </mat-form-field>\n          </p>\n\n          <button\n            mat-flat-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!sign_up_form.valid\"\n          >\n            register\n          </button>\n\n          <div style=\"padding-top: 70px;\">\n            Already have an account ?\n            <a [routerLink]=\"['/login']\">Login</a>\n          </div>\n        </form>\n      </mat-grid-tile>\n\n      <mat-grid-tile colspan=\"2\" class=\"register-panel-right\">\n        Welcome to Farmer market\n        <mat-icon>market</mat-icon>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n</body>\n","import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const currentUser = this.authService.currentUserValue();\n    console.log(currentUser);\n    if (currentUser && currentUser.role == \"farmer\") {\n      // logged in so return true\n      return true;\n    } else if (currentUser && currentUser.role == \"super\") {\n      //if the user is logged in but the role is super redirect him to super\n      this.router.navigate([\"/super\"]);\n    } else {\n      // not logged in so redirect to login page with the return url => to return back\n      this.router.navigate([\"/login\"], {\n        queryParams: { returnUrl: state.url },\n      });\n      return false;\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SuperuserGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const currentUser = this.authService.currentUserValue();\n\n    if (currentUser && currentUser.role == \"super\") {\n      // logged in so return true\n      return true;\n    } else if (currentUser && currentUser.role == \"farmer\") {\n      //if the user is logged in but the role is super redirect him to farmer page\n      this.router.navigate([\"/\"]);\n    } else {\n      // not logged in so redirect to login page with the return url => to return back\n      this.router.navigate([\"/login\"], {\n        queryParams: { returnUrl: state.url },\n      });\n      return false;\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    const { url, method, headers, body } = request;\n    let currentUser = this.authService.currentUserValue();\n\n    if (currentUser) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`,\n        },\n      });\n    }\n    return next.handle(request);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { of, Observable, timer, BehaviorSubject, throwError } from \"rxjs\";\nimport { debounceTime, switchMap, map, catchError } from \"rxjs/operators\";\n\nimport {\n  User,\n  Registrationform,\n  LoginCredential,\n  ResetPassword,\n} from \"../_models/user\";\nimport { error } from \"@angular/compiler/src/util\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n  // The RxJS BehaviorSubject is a special type of Subject that keeps hold of the current value and emits\n  // it to any new subscribers as soon as they subscribe, while regular Subjects\n  // don't store the current value and only emit values that are published after a subscription is created.\n  private currentUserSubject: BehaviorSubject<User>;\n\n  private authUrl = \"http://localhost:8080/api/v1/farmermarket/auth\";\n  private farmerUrl = \"http://localhost:8080/api/v1/farmermarket/farmers\";\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(\n      JSON.parse(localStorage.getItem(\"accesstoken\"))\n    );\n  }\n\n  createAccount(data: Registrationform): Observable<any> {\n    // the default role for using the web is farmer\n    return this.http\n      .post(`${this.authUrl}/users`, { ...data, role: \"farmer\" })\n      .pipe(\n        map((user) => {\n          // store user details and jwt token in local storage\n          localStorage.setItem(\n            \"accesstoken\",\n            JSON.stringify({ token: user[\"token\"], role: user[\"role\"] })\n          );\n          this.currentUserSubject.next({\n            token: user[\"token\"],\n            role: user[\"role\"],\n          }); //notify all subscribers that the user has logged in.\n          return user;\n        }),\n        catchError((err) => {\n          // console.log(\"error caught in service\");\n          // console.error(err);\n          //Handle the error here\n          return throwError(err); //Rethrow it back to component\n        })\n      );\n  }\n  checkEmail(email: string) {\n    // check if email exist or not\n    return this.http.get(`${this.authUrl}/users/${email}`);\n  }\n\n  // The currentUserValue getter allows other components an easy way to get the value of the currently logged in user without having to subscribe to the currentUser Observable.\n  public currentUserValue(): User {\n    return this.currentUserSubject.value;\n  }\n\n  login(loginCredential: LoginCredential) {\n    return this.http.post(`${this.authUrl}/login`, loginCredential).pipe(\n      map((user) => {\n        // store user details and jwt token in local storage\n        localStorage.setItem(\n          \"accesstoken\",\n          JSON.stringify({ token: user[\"token\"], role: user[\"role\"] })\n        );\n        this.currentUserSubject.next({\n          token: user[\"token\"],\n          role: user[\"role\"],\n        }); //notify all subscribers that the user has logged in.\n        return user;\n      }),\n      catchError((err) => {\n        // console.log(\"error caught in service\");\n        // console.error(err);\n        //Handle the error here\n        return throwError(err); //Rethrow it back to component\n      })\n    );\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem(\"accesstoken\");\n    this.currentUserSubject.next({ token: null, role: null });\n  }\n  //The logout() method removes the current user object from local storage and publishes null to the currentUserSubject to notify all subscribers that the user has logged out.\n\n  //get user profile -name pictures\n  getMe() {\n    return this.http.get(`${this.authUrl}/me`);\n  }\n\n  forgetPassword(email: string) {\n    return this.http.patch(`${this.authUrl}/forgotpassword`, { email });\n  }\n  resetPassword({ email, password, resettoken }: ResetPassword) {\n    return this.http\n      .patch(`${this.authUrl}/resetpassword/${resettoken}`, {\n        email,\n        password,\n      })\n      .pipe(\n        map((user) => {\n          // store user details and jwt token in local storage\n          localStorage.setItem(\n            \"accesstoken\",\n            JSON.stringify({ token: user[\"token\"], role: user[\"role\"] })\n          );\n          this.currentUserSubject.next({\n            token: user[\"token\"],\n            role: user[\"role\"],\n          }); //notify all subscribers that the user has logged in.\n          return user;\n        }),\n        catchError((err) => {\n          // console.log(\"error caught in service\");\n          // console.error(err);\n          //Handle the error here\n          return throwError(err); //Rethrow it back to component\n        })\n      );\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatGridListModule } from \"@angular/material/grid-list\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { LayoutModule } from \"@angular/cdk/layout\";\nimport { MatBadgeModule } from \"@angular/material/badge\";\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatSlideToggleModule } from \"@angular/material/slide-toggle\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCardModule,\n    MatGridListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    LayoutModule,\n    MatBadgeModule,\n    MatProgressBarModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n  ],\n  exports: [\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCardModule,\n    MatGridListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    LayoutModule,\n    MatBadgeModule,\n    MatProgressBarModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n  ],\n  providers: [],\n})\nexport class AngularMaterialModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}